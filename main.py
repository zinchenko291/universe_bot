# —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞ https://t.me/Bot_Encyclopedia_Bot

import logging
import asyncio
import os

from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
bot = Bot(TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

class StateMachine(StatesGroup):
    playOrNot = State()
    firstMove = State()
    A1 = State()
    A2 = State()
    A3 = State()
    B1 = State()
    B2 = State()
    B3 = State()
    A4 = State()
    B4 = State()

chessPath = os.getenv('CHESS_PATH')

@dp.message_handler(commands = ['start', 'help'], state='*')
async def main_function(message: types.Message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard = True).add('–ö–æ–Ω–µ—á–Ω–æ —Å—ã–≥—Ä–∞—é', '–ò–∑–≤–∏–Ω–∏, –Ω–æ –Ω–µ—Ç')
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø - –±–æ—Ç! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}. –í—ã –≥–æ—Ç–æ–≤—ã —Å—Ä–∞–∑–∏—Ç—å—Å—è —Å–æ –º–Ω–æ–π –∏ –ø–æ–º–µ—Ä–∏—Ç—å—Å—è —Å–∏–ª–æ–π –≤ –∑–Ω–∞–Ω–∏—è—Ö –∏ —É–º–µ–Ω–∏—è—Ö. –ü—Ä–µ–¥–ª–∞–≥–∞—é —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É. –°—ã–≥—Ä–∞–µ–º?', reply_markup = markup)
    logging.info(f'{str(datetime.now())} - {message.from_user.id} - {message.from_user.full_name} - –ù–∞—á–∞–ª –∏–≥—Ä–∞—Ç—å')
    await StateMachine.playOrNot.set()

@dp.message_handler(state=StateMachine.playOrNot)
async def checking_the_main_question(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª –≤–æ–ø—Ä–æ—Å–∞
    if message.text == '–ö–æ–Ω–µ—á–Ω–æ —Å—ã–≥—Ä–∞—é':
        logging.info(f'{str(datetime.now())} - {message.from_user.id} - {message.from_user.full_name} - –°–æ–≥–ª–∞—Å–∏–ª—Å—è –∏–≥—Ä–∞—Ç—å')
        markup = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard = True, row_width = 1).add('–Ø –±—É–¥—É —Ö–æ–¥–∏—Ç—å –ø–µ—Ä–≤—ã–º', '–ú–æ–∂–µ—à—å —Ö–æ–¥–∏—Ç—å –ø–µ—Ä–≤—ã–º')
        await message.answer_photo(types.InputFile(chessPath + '1.png'), '–ö—Ä—É—Ç–æ, –≤–æ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –¥–æ—Å–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –í—ã –±—É–¥–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –º–µ–Ω—è.\n–í—ã–±–∏—Ä–∞–π –∫—Ç–æ –±—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å –ø–µ—Ä–≤—ã–π', reply_markup = markup)
        await StateMachine.firstMove.set()
    else:
        logging.info(f'{str(datetime.now())} - {message.from_user.id} - {message.from_user.full_name} - –û—Ç–∫–∞–∑–∞–ª—Å—è –∏–≥—Ä–∞—Ç—å')
        await message.answer('–ñ–∞–ª—å, –∫–∞–∫ –∑–∞—Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å, –Ω–∞–ø–∏—à–∏ –º–Ω–µ /start –∏ –º—ã —Å—ã–≥—Ä–∞–µ–º')
        await state.reset_state(with_data=False)

@dp.message_handler(state=StateMachine.firstMove)
async def the_first_move(message: types.Message):
    # –ø–µ—Ä–≤—ã–π —Ö–æ–¥
    if message.text == '–Ø –±—É–¥—É —Ö–æ–¥–∏—Ç—å –ø–µ—Ä–≤—ã–º':
        logging.info(f'{str(datetime.now())} - {message.from_user.id} - {message.from_user.full_name} - –ë—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å –ø–µ—Ä–≤—ã–º')
        markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
        item_button = types.InlineKeyboardButton(text = '–•–æ–¥–∏—Ç—å –Ω–∞ –∫–ª–µ—Ç–∫—É E3')
        markup.add(item_button)
        await message.answer_photo(types.InputFile(chessPath + '1.png'), '–•–æ—Ä–æ—à–æ, —Ç—ã –∏–≥—Ä–∞–µ—à—å –∑–∞ –±–µ–ª—É—é –∫–æ–º–∞–Ω–¥—É, –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –¥–µ–ª–∞–µ—Ç—Å—è –ø–µ—à–∫–æ–π –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ E2, –≤—ã–±–∏—Ä–∞–π –∫–ª–µ—Ç–∫—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —Ö–æ–¥–∏—Ç—å', reply_markup = markup)
        await StateMachine.B1.set()
    else:
        logging.info(f'{str(datetime.now())} - {message.from_user.id} - {message.from_user.full_name} - –ë—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å –≤—Ç–æ—Ä—ã–º')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–•–æ–¥–∏—Ç—å –Ω–∞ –∫–ª–µ—Ç–∫—É E3')
        await message.answer_photo(types.InputFile(chessPath + '5.png'), '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É—Å—Ç—É–ø–∏–ª –º–Ω–µ. –Ø —Å—Ö–æ–¥–∏–ª –ø–µ—à–∫–æ–π –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–æ—è–ª–∞ –Ω–∞ F7, –∞ —Ç–µ–ø–µ—Ä—å —Å—Ç–æ–∏—Ç –Ω–∞ F5.')
        await message.answer('–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π —Ö–æ–¥. –ö—É–¥–∞ —Ö–æ—á–µ—à—å —Ö–æ–¥–∏—Ç—å –ø–µ—à–∫–æ–π –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–æ–∏—Ç –Ω–∞ E2, –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:', reply_markup = markup)
        await StateMachine.A1.set()

@dp.message_handler(state=StateMachine.A1)
async def A1(message: types.Message):
    # –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    if message.text == '–•–æ–¥–∏—Ç—å –Ω–∞ –∫–ª–µ—Ç–∫—É E3':
        logging.info(f'{str(datetime.now())} - {message.from_user.id} - {message.from_user.full_name} - –ó–∞–¥–∞—á–∞ —Å –ø–µ—á–µ–Ω—å–µ–º')
        markup = types.ReplyKeyboardRemove()
        await message.answer('–ü–æ—Å—Ç–æ–π, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏–µ: –ü–µ—á–µ–Ω—å–µ —É–ø–∞–∫–æ–≤–∞–ª–∏ –≤ –ø–∞—á–∫–∏ –ø–æ 250 –≥. –ü–∞—á–∫–∏ —Å–ª–æ–∂–∏–ª–∏ –≤ —è—â–∏–∫ –≤ 4 —Å–ª–æ—è. –ö–∞–∂–¥—ã–π —Å–ª–æ–π –∏–º–µ–µ—Ç 5 —Ä—è–¥–æ–≤ –ø–æ 6 –ø–∞—á–µ–∫ –≤ –∫–∞–∂–¥–æ–º. –í—ã–¥–µ—Ä–∂–∏—Ç –ª–∏ —è—â–∏–∫, –µ—Å–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –æ–Ω —Ä–∞—Å—Å—á–∏—Ç–∞–Ω, —Ä–∞–≤–Ω–∞ 32 –∫–≥? –ù–∞–ø–∏—à–∏—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç.', reply_markup = markup)
        await StateMachine.A2.set()
    else:
        await message.answer('üòî –ù–∞ —ç—Ç—É –ø–æ–∑–∏—Ü–∏—é –Ω–µ–ª—å–∑—è —Ö–æ–¥–∏—Ç—å.')

@dp.message_handler(state=StateMachine.A2)
async def A2(message: types.Message):
    # —Å—Ö–æ–¥–∏—Ç—å 2 —Ä–∞–∑
    if message.text.lower() == '–¥–∞':
        markup = types.ReplyKeyboardMarkup(resize_keyboard = True).add('–°—Ö–æ–¥–∏—Ç—å –Ω–∞ H5')
        await message.answer_photo(types.InputFile(chessPath + '7.png'), '–ú–æ–ª–æ–¥–µ—Ü, –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à–∏–ª –∑–∞–¥–∞–Ω–∏–µ, —è —Ö–æ–∂—É –ø–µ—à–∫–æ–π –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–æ—è–ª–∞ –Ω–∞ G7, –∞ —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ —Å—Ç–æ–∏—Ç –Ω–∞ G5')
        await message.answer('–ê —Ç—ã –∫—É–¥–∞ –ø–æ–π–¥–µ—à—å –∫–æ—Ä–æ–ª–µ–≤–æ–π, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–æ–∏—Ç –Ω–∞ D1', reply_markup = markup)
        await StateMachine.A3.set()
    else:
        await message.answer('–¢—ã –æ—à–∏–±—Å—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')

@dp.message_handler(state=StateMachine.A3)
async def A3(message: types.Message):
    # –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ö–æ–¥
    if message.text == '–°—Ö–æ–¥–∏—Ç—å –Ω–∞ H5':
        logging.info(f'{str(datetime.now())} - {message.from_user.id} - {message.from_user.full_name} - –ó–∞–¥–∞—á–∞ –≥—Ä–∞—Ñ–∏–∫–æ–º')
        markup = types.ReplyKeyboardRemove()
        await message.answer_photo(types.InputFile('exercise.jpg'), '–ü–æ—Å—Ç–æ–π, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏–µ. –û—Ç–≤–µ—Ç –∑–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä–∞–º–∏, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.', reply_markup=markup)
        await StateMachine.A4.set()
    else:
        await message.answer('üòî –ù–∞ —ç—Ç—É –ø–æ–∑–∏—Ü–∏—é –Ω–µ–ª—å–∑—è —Ö–æ–¥–∏—Ç—å.')

@dp.message_handler(state=StateMachine.A4)
async def A4(message: types.Message, state: FSMContext):
    # —Ñ–∏–Ω–∞–ª
    if message.text == '2314':
        logging.info(f'{str(datetime.now())} - {message.from_user.id} - {message.from_user.full_name} - –ó–∞–∫–æ–Ω—á–∏–ª –∏–≥—Ä–∞—Ç—å')
        markup = types.ReplyKeyboardRemove()
        await message.answer_photo(types.InputFile(chessPath + '8.png'), '–ü–û–ó–î–†–ê–í–õ–Ø–Æ!!! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!!! –í—ã —Å–¥–µ–ª–∞–ª–∏ —à–∞—Ö –∏ –º–∞—Ç –º–Ω–µ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start', reply_markup=markup)
        await state.reset_state(with_data=False)
    else:
        await message.answer('–¢—ã –æ—à–∏–±—Å—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')

        
@dp.message_handler(state=StateMachine.B1)
async def B1(message: types.Message):
    # –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    if message.text == '–•–æ–¥–∏—Ç—å –Ω–∞ –∫–ª–µ—Ç–∫—É E3':
        logging.info(f'{str(datetime.now())} - {message.from_user.id} - {message.from_user.full_name} - –ó–∞–¥–∞—á–∞ —Å –ø–æ–ª–æ–º')
        markup = types.ReplyKeyboardRemove()
        await message.answer('–ü–æ—Å—Ç–æ–π, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏–µ: –ü–æ–ª –∫–æ–º–Ω–∞—Ç—ã, –∏–º–µ—é—â–µ–π —Ñ–æ—Ä–º—É –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ 7 –º –∏ 9 –º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–∫—Ä—ã—Ç—å –ø–∞—Ä–∫–µ—Ç–æ–º –∏–∑ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö –¥–æ—â–µ—á–µ–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ 10 —Å–º –∏ 20 —Å–º. –°–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–∞–∫–∏—Ö –¥–æ—â–µ—á–µ–∫? –ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.', reply_markup = markup)
        await StateMachine.B2.set()
    else:
        await message.answer('üòî –ù–∞ —ç—Ç—É –ø–æ–∑–∏—Ü–∏—é –Ω–µ–ª—å–∑—è —Ö–æ–¥–∏—Ç—å.')

@dp.message_handler(state=StateMachine.B2)
async def B2(message: types.Message):
    # —Å–¥–µ–ª–∞–Ω—ã 2 —Ö–æ–¥–∞
    if message.text == '3150':
        markup = types.ReplyKeyboardMarkup(resize_keyboard = True).add('–°—Ö–æ–¥–∏—Ç—å –Ω–∞ H5')
        await message.answer('–ü–æ–∫–∞ —è –∂–¥–∞–ª —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —è —É–∂–µ —Å—Ö–æ–¥–∏–ª –ø–µ—à–∫–æ–π –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–æ—è–ª–∞ –Ω–∞ F7, –∞ —Ç–µ–ø–µ—Ä—å —Å—Ç–æ–∏—Ç –Ω–∞ F5')
        await asyncio.sleep(1)
        await message.answer_photo(types.InputFile(chessPath + '3.png'), '–ú–æ–ª–æ–¥–µ—Ü. –¢—ã —Ä–µ—à–∏–ª –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!!! –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞–π —Å–Ω–æ–≤–∞ —Å–≤–æ–π —Ö–æ–¥. –°–µ–π—á–∞—Å –±—É–¥–µ—à—å —Ö–æ–¥–∏—Ç—å –∫–æ—Ä–æ–ª–µ–≤–æ–π, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–æ–∏—Ç –Ω–∞ D1', reply_markup = markup)
        await StateMachine.B3.set()
    else:
        await message.answer('–¢—ã –æ—à–∏–±—Å—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')

@dp.message_handler(state=StateMachine.B3)
async def B3(message: types.Message):
    # —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –∫–æ—Ä–æ–ª–µ–≤–æ–π
    if message.text == '–°—Ö–æ–¥–∏—Ç—å –Ω–∞ H5':
        logging.info(f'{str(datetime.now())} - {message.from_user.id} - {message.from_user.full_name} - –ó–∞–¥–∞—á–∞ —Å –∫–∏–ª–æ–≥—Ä–∞–º–º–æ–º')
        markup = types.ReplyKeyboardMarkup(resize_keyboard = True).add('–í–∞—Ç–∞', '–ñ–µ–ª–µ–∑–æ', '–û–Ω–∏ —Ä–∞–≤–Ω—ã')
        await message.answer('–•–æ—Ä–æ—à–æ, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É. –ó–∞–¥–∞—á–∞: —á—Ç–æ –ª–µ–≥—á–µ: 1 –∫–≥ –≤–∞—Ç—ã –∏–ª–∏ 1 –∫–≥ –∂–µ–ª–µ–∑–∞?', reply_markup = markup)
        await StateMachine.B4.set()
    else:
        await message.answer('üòî –ù–∞ —ç—Ç—É –ø–æ–∑–∏—Ü–∏—é –Ω–µ–ª—å–∑—è —Ö–æ–¥–∏—Ç—å.')

@dp.message_handler(state=StateMachine.B4)
async def B4(message: types.Message, state: FSMContext):
    # —Ñ–∏–Ω–∞–ª
    if message.text == '–û–Ω–∏ —Ä–∞–≤–Ω—ã':
        logging.info(f'{str(datetime.now())} - {message.from_user.id} - {message.from_user.full_name} - –ó–∞–∫–æ–Ω—á–∏–ª –∏–≥—Ä–∞—Ç—å')
        markup = types.ReplyKeyboardRemove()
        await message.answer_photo(types.InputFile(chessPath + '4.png'), '–ü–û–ó–î–†–ê–í–õ–Ø–Æ!!! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!!! –í—ã —Å–¥–µ–ª–∞–ª–∏ —à–∞—Ö –∏ –º–∞—Ç –º–Ω–µ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start', reply_markup=markup)
        await state.reset_state(with_data=False)
    else:
        await message.answer('–¢—ã –æ—à–∏–±—Å—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')

executor.start_polling(dp, skip_updates=True)